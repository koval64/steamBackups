#!/bin/bash

#source fileBrowser

# get seconds and miliseconds from shell
#
# date +"%s %N"
#
# $IFS - international field separator - special shell variable used for
#        word splitting after expansion and to split lines into words
#        with the 'read' builtin command
#

STEAM_DIR="$HOME/.steam/steam/steamapps/common"
BACKUP_DIR=" ### type here backup folder path    ###    i.e. /home/user/backups"
COMMAND=(tar -I lbzip2 -cvf)
COMMAND_RESTORE=(tar -I lbzip2 -xvf)
EXTENSION=.tbz2
SUMMARY=()
INDEX=0

function print_src_and_dst_dirs() {
    echo "  Steam directory:   $STEAM_DIR"
    echo "Backups directory:   $BACKUP_DIR"
}

function add_to_summary() {
    local TIME=$1
    local NAME=$2

          local SS=$((TIME%60))		# get seconds
        local TIME=$((TIME/60))		# convert to minutes
          local MM=$((TIME%60))		# get minutes
          local HH=$((TIME/60))		# get hours

          local E1=$(printf "%02d:%02d:%02d   " "$HH" "$MM" "$SS")
    SUMMARY[INDEX]="$E1 $NAME"
         let INDEX=INDEX+1
}

function print_summary() {
    for item in ${SUMMARY[*]}
    do
	printf "    %s\n" $item
    done
}

function clear_summary() {
    SUMMARY=()
    INDEX=0
}

function backupGame() {

    local i=0
    local files=()

    for name in $STEAM_DIR/*
    do
	game=`echo $name | awk -F "[/]+" '{ print $NF }'`
	files[i]="$game"	# game directory name
	files[i+1]=""
	files[i+2]="NO"
	((i+=3))
    done

    OPTION=$(whiptail --title "Backup Game" \
	--checklist "" --ok-button "Backup" --cancel-button "Back to main" \
	22 0 16 "${files[@]}" 3>&1 1>&2 2>&3)

    exitstatus=$?

    if [[ $exitstatus == 0 ]] ; then

	echo "creating backups..."

	IFS=$'\n'
	NAMES=$(echo -e ${OPTION//\" \"/\"\\n\"})
	for name in $NAMES; do
	    name=${name:1:-1}
	    src=$STEAM_DIR/$name
	    dst=$BACKUP_DIR/$name$EXTENSION
	    START=`date +"%s"`
	    time ${COMMAND[@]} "$dst" -C "$STEAM_DIR" "$name"
	    TIME=$((`date +"%s"` - START))
	    add_to_summary "$TIME" "$name"
	done
	print_src_and_dst_dirs
	print_summary
	clear_summary
	read -p "Press any key..."
    else
	echo "exitstatus" $exitstatus
    fi
}

function restoreGame() {

    local i=0
    local files=()

    for name in "$BACKUP_DIR"/*
    do
	game=`echo $name | awk -F "[/]+" '{ print $NF }'`
	files[i]="$game"	# game directory name
	files[i+1]=""
	files[i+2]="NO"
	((i+=3))
    done

    OPTION=$(whiptail --title "Restore Game" \
	--checklist "" --ok-button "Restore" --cancel-button "Back to main" \
	22 0 16 "${files[@]}" 3>&1 1>&2 2>&3)

    exitstatus=$?

    if [[ $exitstatus == 0 ]] ; then
	echo "restoring game:"

	IFS=$'\n'
	NAMES=$(echo -e ${OPTION//\" \"/\"\\n\"})
	for name in $NAMES; do
	    name=${name:1:-1}
	    src=$BACKUP_DIR/$name
	    dst=$STEAM_DIR/
	    START=`date +"%s"`
	    time ${COMMAND_RESTORE[@]} "$src" -C "$dst"
	    TIME=$((`date +"%s"` - START))
	    add_to_summary "$TIME" "$name"
	done
	print_summary
	clear_summary
	print_src_and_dst_dirs
	read -p "Press any key..."
    else
	echo "back to main menu"
    fi
}

function settings_show() {
     options="Configuration:\n"
     options+="\n"
     options+="Steam directory:\n"
     options+="$STEAM_DIR\n"
     options+="\n"
     options+="Backup directory:\n"
     options+="$BACKUP_DIR\n"
     options+="\n"
     OPTION=$(whiptail --msgbox "$options" 22 75 10 3>&1 1>&2 2>&3)
}

DEFAULT_ITEM="4"

function mainMenu() {
    options=( \
	    "" "" \
	    "1" "Backup" \
	    "2" "Restore"
	    "" "" \
	    "3" "Show settings" \
	    "" "" \
	    "4" "Exit"
	    )

    OPTION=$(whiptail --title "Backup and Restore Steam Games" \
	--default-item "$DEFAULT_ITEM" --ok-button "Exit" --nocancel \
	--menu "" 14 75 7 "${options[@]}" 3>&1 1>&2 2>&3)
}


EXIT=0
while [ $EXIT -eq 0 ]; do

    mainMenu

    if [[ $OPTION == 1 ]] ; then
	DEFAULT_ITEM="1"
	backupGame
    elif [[ $OPTION == 2 ]] ; then
	DEFAULT_ITEM="2"
	restoreGame
    elif [[ $OPTION == 3 ]] ; then
	DEFAULT_ITEM="4"
	settings_show
    elif [[ $OPTION == 4 ]] ; then
	DEFAULT_ITEM="4"
	let EXIT=1
    fi
done
